========================================================================================
HANDSHAKE MESSAGE FROM CLIENT
========================================================================================

Request:
- [magic(3 bytes) = STG]
- [version (1 byte)]
- [reserved (8 bytes)]
- [clientIDLen (1 byte)]
- [clientID (clientIDLen bytes)]
- [end (1 byte) = 0x0A]

-------------------
- magic
    3 bytes that represents the protocol magic number.


-------------------
- version
    1 byte that represents the version of the protocol. Currently, only version 0x01 is supported.

-------------------
- reserved
    8 bytes that are reserved for future use. Clients must send these bytes as zero.

-------------------
- clientIDLen
    1 byte that represents the length of the clientID.

-------------------
- clientID
    (clientIDLen bytes) the unique identifier for the client.

-------------------
- end
    1 byte indicating the end of the message (0x0A - \n).


HANDSHAKE RESPONSE
-----------------------------------------------------------------

RESPONSE (OK):
- [status (1 byte) 0x00]
- [assignedIDLen (1 byte)]
- [assignedID (assignedIDLen bytes)]
- [endChar (1 byte 0x0A)]

RESPONSE (ERR):
- [status (1 byte) 0x01]
- [errorCode (2 bytes)]
- [endChar (1 byte 0x0A)]

========================================================================================
CLIENT RESPONSES
========================================================================================

The client responses have the following format:

- [statusCode(1 byte)] 
- [errorCode (2 bytes)]
- [payloadLength (4 bytes)]
- [payload (payloadLength bytes)]

Client response is composed for 7 header bytes and the payload.

-------------------
Status Codes:
- 0x00: Success
- 0x01: Error

-------------------
Error Codes:
- 0x0001 = NotFound
- 0x0002 = PermissionDenied
- 0x0003 = BadRequest

-------------------
Payload Length
- uint32 4 bytes representing the length of the payload in bytes.

-------------------
Payload
- if statusCode == 0x00, this is the "successful" data (e.g. the block's bytes on a READ)
- if statusCode == 0x01, this is an ASCII or UTF-8 error message string.

========================================================================================
WRITE MESSAGES FROM CLIENT
========================================================================================

Format of a WRITE message request sent by the client:

- [messageType 1 byte]
- [filenameLength 1 byte]
- [filename (filenameLength bytes)]
- [size 4 bytes]
- [rawData (size bytes)]


------------------
messageType
- 0x01: Read
- 0x02: Write
- 0x04: Delete


-------------------
filenameLength
- 1 byte representing the length of the filename in bytes.

-------------------
filename
- (filenameLength bytes) the name of the file to read.

-------------------
size
- 4 bytes representing the size of the rawData in bytes.

-------------------
rawData
- (size bytes) the actual data to be read.

-------------------
endChar
- 1 byte indicating the end of the message (0x0A - \n).

CLIENT RESPONSES
------------------------------------------------------------

HEADER CLIENT RESPONSE
-----------------------

The header client response have the following format:

- [statusCode(1 byte)] 
- [errorCode (2 bytes)]
- [payloadLength (4 bytes)]
- [payload (payloadLength bytes)]

Client response is composed for 7 header bytes, if the payload length is 0, the payload is empty
and clients must not receive any additional bytes

-------------------
Status Codes:
- 0x00: Success
- 0x01: Error

-------------------
Error Codes:
- 0x0001 = NotFound
- 0x0002 = PermissionDenied
- 0x0003 = BadRequest

-------------------
Payload Length
- uint32 4 bytes representing the length of the payload in bytes.

PAYLOAD RESPONSE
-----------------------

If the payloadLength > 0, the payload is sent after the header

- [payload (payloadLength bytes)]

========================================================================================
READ MESSAGES FROM CLIENT
========================================================================================

Format of the READ message request sent by a client:

- [messageType 1 byte]
- [filenameLength 1 byte]
- [filename (filenameLength bytes)]

-------------------
messageType
- 0x01: Read
- 0x02: Write


-------------------
filenameLength
- 1 byte representing the length of the filename in bytes.

-------------------
filename
- (filenameLength bytes) the name of the file to read.

-------------------
endChar
- 1 byte indicating the end of the message (0x0A - \n).


========================================================================================
DELETE MESSAGE FROM CLIENT
========================================================================================

Format of the DELETE message request sent by a client:

- [messageType 1 byte]
- [filenameLength 1 byte]
- [filename (filenameLength bytes)]
- [endChar 1 byte]


-------------------
messageType
- 0x01: Read
- 0x02: Write
- 0x04: Delete


-------------------
filenameLength
- 1 byte representing the length of the filename in bytes.

-------------------
filename
- (filenameLength bytes) the name of the file to delete.

-------------------
endChar
- 1 byte indicating the end of the message (0x0A - \n).

DELETE RESPONSE MESSAGE
------------------------------------------------------------

the client response have the following format:

- [statusCode(1 byte)]
- [errorCode (2 bytes)]
- [payloadLength (4 bytes)]
- [endChar (1 byte)]

========================================================================================
UPDATE MESSAGE FROM CLIENT
========================================================================================

Format of the UPDATE message request sent by a client:

- [messageType 1 byte]
- [filenameLength 1 byte]
- [filename (filenameLength bytes)]
- [size 4 bytes]
- [rawData (size bytes)]
- [endChar 1 byte]


-------------------
messageType
- 0x01: Read
- 0x02: Write
- 0x03: Update
- 0x04: Delete


-------------------
filenameLength
- 1 byte representing the length of the filename in bytes.

-------------------
filename
- (filenameLength bytes) the name of the file to update.

-------------------
size
- 4 bytes representing the size of the rawData in bytes.

-------------------
rawData
- (size bytes) the actual data to be updated.

-------------------
endChar
- 1 byte indicating the end of the message (0x0A - \n).


UPDATE RESPONSE MESSAGE
------------------------------------------------------------
The client responses have the following format:

- [statusCode(1 byte)] 
- [errorCode (2 bytes)]
- [payloadLength (4 bytes)]
- [payload (payloadLength bytes)]
- [endChar (1 byte)]

========================================================================================
DESIGN ISSUES
========================================================================================
- Currently the protocol requires as end character the byte 0x0A (LF), if a client wants to send a message
    that does not end with this byte, the server never reads the first bytes send, because it is
    waiting for the end character to process the message. The design about add the character as an end message is good,
    but the problem is if a custom client want so to connect to the server and was not designed with this in mind,
    it will not be able to communicate effectively, leading to potential data loss or corruption and cause false negatives.